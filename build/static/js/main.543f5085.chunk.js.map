{"version":3,"sources":["components/Controls/Controls.module.css","App.module.css","components/CardRow/CardRow.module.css","components/PersonCard/PersonCard.module.css","components/TempItem/TempItem.js","components/PreferenceList/PreferenceList.js","components/PersonCard/PersonCard.js","components/CardRow/CardRow.js","components/Controls/Controls.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TempItem","props","name","PreferenceList","items","data","itemHeight","tapDelay","onReorder","obj","update","id","PersonCard","avatar","useMemo","clothingColor","color","clothing","cardClasses","classes","Card","push","CardRed","CardBlue","className","join","CardName","number","CardInner","AvatarImage","OrderList","key","Math","random","CardRow","prefData","map","el","idx","curr","rank","currId","top","Controls","containerClasses","hide","Hide","TitleContainer","href","target","rel","ButtonRow","onClick","randomize","Button","reset","clear","VisualizeButton","visualize","shuffleArray","array","i","length","j","floor","randomizePreferences","preferences","preferenceReducer","preferencesState","action","type","newPreferences","updated","initPreferences","Error","App","useReducer","preferenceData","dispatch","useState","visualizing","setVisualizing","window","innerWidth","innerHeight","setDimensions","lines","setLines","useEffect","addEventListener","updatePreferenceHandler","updatedPreferencesObject","updatedPreferences","clearMatching","getMatching","emptyLines","requestPreferences","unshift","fetch","method","headers","body","JSON","stringify","then","r","json","catch","e","console","log","matching","confirm","newLines","nextLines","source","dest","parseInt","toReplace","setTimeout","drawLines","forEach","from","toString","to","abs","delay","zIndex","fromAnchor","toAnchor","borderStyle","topRow","slice","bottomRow","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.543f5085.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"Controls_Controls__N41_2\",\"VisualizeButton\":\"Controls_VisualizeButton__DFWzR\",\"Hide\":\"Controls_Hide__2Wc18\",\"Visualizing\":\"Controls_Visualizing__2504b\",\"TitleContainer\":\"Controls_TitleContainer__2dqEA\",\"ButtonRow\":\"Controls_ButtonRow__mGLvz\",\"Button\":\"Controls_Button__uTsZA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3QZzZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardRow\":\"CardRow_CardRow__2jD79\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"PersonCard_Card__3dpnY\",\"CardRed\":\"PersonCard_CardRed__3UT9O\",\"CardBlue\":\"PersonCard_CardBlue__30Gxo\",\"CardInner\":\"PersonCard_CardInner__1m1vJ\",\"AvatarImage\":\"PersonCard_AvatarImage__3XWg9\",\"CardName\":\"PersonCard_CardName__2jhdJ\",\"OrderList\":\"PersonCard_OrderList__1EThk\"};","import React from 'react';\r\n\r\nconst TempItem = props => {\r\n    return (\r\n        <div>\r\n            {props.name}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default TempItem;","import React from \"react\";\nimport TempItem from \"../TempItem/TempItem\";\nimport ListDragDrop from \"@bit/cy-shan.fancy-data-manipulators.list-drag-drop\";\n\nconst PreferenceList = props => {\n    return (\n        <>\n            <ListDragDrop\n                items={props.data}\n                itemHeight={30}\n                tapDelay={100}\n                onReorder={obj => props.update(obj, props.id)}\n            >\n                <TempItem />\n            </ListDragDrop>\n        </>\n    );\n};\n\nexport default PreferenceList;\n","import React, { useMemo } from \"react\";\nimport classes from \"./PersonCard.module.css\";\nimport { BigHead } from \"@bigheads/core\";\nimport PreferenceList from \"../PreferenceList/PreferenceList\";\n\nconst PersonCard = props => {\n    const avatar = useMemo(\n        () => <BigHead clothingColor={props.color} clothing={\"shirt\"} />,\n        [props.color]\n    );\n\n    let cardClasses = [classes.Card, props.id];\n    if (props.color === \"red\") cardClasses.push(classes.CardRed);\n    else cardClasses.push(classes.CardBlue);\n\n    return (\n        <div className={cardClasses.join(\" \")}>\n            <h3 className={classes.CardName}>Person {props.number}</h3>\n            <div className={classes.CardInner}>\n                <div className={classes.AvatarImage}>{avatar}</div>\n                <div className={classes.OrderList}>\n                    {/*Super hacky (key), but forces update of preference list since deep props change is made.*/}\n                    <PreferenceList\n                        id={props.id}\n                        data={props.data}\n                        key={Math.random()}\n                        update={props.update}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default PersonCard;\n","import React from \"react\";\nimport classes from \"./CardRow.module.css\";\nimport PersonCard from \"../PersonCard/PersonCard\";\n\nconst CardRow = props => {\n    return (\n        <div className={classes.CardRow}>\n            {props.prefData.map((el, idx) => {\n                let curr = el.map(rank => ({\n                    id: rank,\n                    name: \"Person \" + (rank + 1)\n                }));\n\n                let currId = props.top ? idx : idx + 5;\n                return (\n                    <PersonCard\n                        data={curr}\n                        id={currId}\n                        key={idx}\n                        number={idx + 1}\n                        color={props.color}\n                        update={props.update}\n                    />\n                );\n            })}\n        </div>\n    );\n};\n\nexport default CardRow;\n","import React from \"react\";\nimport classes from \"./Controls.module.css\";\n\nconst Controls = props => {\n    let containerClasses = [classes.Controls];\n    if (props.hide) containerClasses.push(classes.Hide);\n\n    return (\n        <div className={containerClasses.join(\" \")}>\n            <div className={classes.TitleContainer}>\n                <h3>\n                    <a\n                        href=\"https://en.wikipedia.org/wiki/Stable_marriage_problem\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        Stable Matching\n                    </a>{\" \"}\n                    Visualizer\n                </h3>\n                <a\n                    href=\"https://hursharora.github.io/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Hursh arora\n                </a>\n            </div>\n            <div className={classes.ButtonRow}>\n                <button onClick={props.randomize} className={classes.Button}>\n                    Randomize Preferences\n                </button>\n                <button onClick={props.reset} className={classes.Button}>\n                    Worst Case Preferences\n                </button>\n            </div>\n            <button onClick={props.clear} className={classes.Button}>\n                Clear Lines\n            </button>\n            <button\n                className={classes.VisualizeButton}\n                onClick={props.visualize}\n            >\n                Visualize!\n            </button>\n        </div>\n    );\n};\n\nexport default Controls;\n","import React, { useEffect, useMemo, useReducer, useState } from \"react\";\nimport classes from \"./App.module.css\";\nimport CardRow from \"./components/CardRow/CardRow\";\nimport LineTo from \"react-lineto\";\nimport Controls from \"./components/Controls/Controls\";\n\n//major bug, component not updating because i was using the index as the key in a map function,\n//use force update...\n\nconst initPreferences = () => {\n    const initPreferences = [];\n    for (let i = 0; i < 10; i++) {\n        let curr = [];\n        for (let j = 0; j < 5; j++) {\n            curr.push(j);\n        }\n        initPreferences.push(curr);\n    }\n    return initPreferences;\n};\n\n//shuffleArray (credit: ashleedawg and Laurens Holst on stackoverflow)\nconst shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n};\n\nconst randomizePreferences = () => {\n    const preferences = [];\n    for (let i = 0; i < 10; i++) {\n        let curr = [];\n        for (let j = 0; j < 5; j++) {\n            curr.push(j);\n        }\n        preferences.push(shuffleArray(curr));\n    }\n    return preferences;\n};\n\nconst preferenceReducer = (preferencesState, action) => {\n    switch (action.type) {\n        case \"UPDATE\":\n            let newPreferences = [...preferencesState];\n            newPreferences[action.id] = action.updated;\n            return newPreferences;\n        case \"RANDOMIZE\":\n            return randomizePreferences();\n        case \"RESET\":\n            return initPreferences();\n        default:\n            throw new Error(\"Invalid action type\");\n    }\n};\n\nconst App = () => {\n    //console.log(\"RENDERING APP\");\n    const [preferenceData, dispatch] = useReducer(\n        preferenceReducer,\n        [],\n        randomizePreferences\n    );\n\n    const [visualizing, setVisualizing] = useState(false);\n\n    //state so component updates when window dimensions are updated.\n    const [, setDimensions] = useState([window.innerWidth, window.innerHeight]);\n\n    //state representing lines from index -> value\n    const [lines, setLines] = useState([null, null, null, null, null]);\n\n    useEffect(() => {\n        window.addEventListener(\"resize\", () => {\n            setDimensions([window.innerWidth, window.innerHeight]);\n        });\n    }, []);\n\n    const updatePreferenceHandler = (updatedPreferencesObject, id) => {\n        let updatedPreferences = [];\n        for (let i = 0; i < 5; i++) {\n            updatedPreferences.push(updatedPreferencesObject[i][\"id\"]);\n        }\n        dispatch({ type: \"UPDATE\", id: id, updated: updatedPreferences });\n    };\n\n    const clearMatching = () => {\n        setLines([null, null, null, null, null]);\n    };\n\n    const getMatching = () => {\n        //send request to server and get response\n        //parse response array and update lines accordingly\n        let emptyLines = [null, null, null, null, null];\n        let requestPreferences = [...preferenceData];\n        requestPreferences.unshift(5);\n        // console.log(JSON.stringify(requestPreferences));\n        fetch(\"/smp\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(requestPreferences)\n        })\n            .then(r => r.json())\n            .then(r => {\n                //console.log(r);\n                clearMatching();\n                setVisualizing(true);\n                visualize(r, 0, null, emptyLines);\n            })\n            .catch(e => console.log(e));\n    };\n\n    //main visualization function\n    const visualize = (matching, idx, confirm, newLines) => {\n        //console.log(\"Running visualize at\" + idx);\n        // console.log(\"Next\");\n        let nextLines = [...newLines];\n        //console.log(nextLines);\n        let curr = matching[idx];\n\n        //\"X Y\"\n        if (curr[1] === \" \") {\n            setVisualizing(false);\n            return;\n        }\n\n        //\"Male: X Considering Female: Y\"\n        let source, dest;\n        if (curr[0] === \"M\") {\n            source = parseInt(curr[6]);\n            dest = parseInt(curr[28]) + 5;\n            nextLines[source] = dest * -1;\n            //console.log(nextLines);\n        } else {\n            if (curr[2] === \"C\") {\n                //console.log(\"ACCEPTED\");\n                nextLines[confirm] = nextLines[confirm] * -1;\n            } else if (curr[2] === \"J\") {\n                //\"REJECTED\"\n                //console.log(\"REJECTED\");\n                nextLines[confirm] = null;\n            } else {\n                //\"REPLACED\"\n                //console.log(\"REPLACED\");\n                let toReplace = nextLines[confirm] * -1;\n                nextLines = nextLines.map(el => {\n                    if (el === toReplace) return null;\n                    return el;\n                });\n                nextLines[confirm] = toReplace;\n            }\n        }\n        setLines(nextLines);\n        setTimeout(() => visualize(matching, idx + 1, source, nextLines), 1000);\n    };\n\n    let drawLines = [];\n    lines.forEach((el, idx) => {\n        if (el) {\n            drawLines.push(\n                <LineTo\n                    from={idx.toString()}\n                    to={Math.abs(el).toString()}\n                    delay\n                    zIndex={-1}\n                    fromAnchor=\"bottom center\"\n                    toAnchor=\"top center\"\n                    key={idx}\n                    borderStyle={el < 0 ? \"dashed\" : \"solid\"}\n                />\n            );\n        }\n    });\n\n    //using useMemo instead of reactMemo in CardRow because slice returns a new array\n    //wanted to keep all preferences in a single state to make requests to backend easy\n    let topRow = useMemo(\n        () => (\n            <CardRow\n                prefData={preferenceData.slice(0, 5)}\n                color={\"blue\"}\n                update={updatePreferenceHandler}\n                top\n            />\n        ),\n        [preferenceData]\n    );\n\n    let bottomRow = useMemo(\n        () => (\n            <CardRow\n                prefData={preferenceData.slice(5, 10)}\n                color={\"red\"}\n                update={updatePreferenceHandler}\n            />\n        ),\n        [preferenceData]\n    );\n    return (\n        <>\n            {drawLines}\n            <div className={classes.App}>\n                {topRow}\n                <Controls\n                    randomize={() => dispatch({ type: \"RANDOMIZE\" })}\n                    reset={() => dispatch({ type: \"RESET\" })}\n                    visualize={() => getMatching()}\n                    clear={() => clearMatching()}\n                    hide={visualizing}\n                />\n                {bottomRow}\n            </div>\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}